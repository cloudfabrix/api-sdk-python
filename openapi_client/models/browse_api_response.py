# coding: utf-8

"""
    CloudFabrix RDA Platform API

    CloudFabrix RDA Platform API  # noqa: E501

    The version of the OpenAPI document: 3.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.serviceresult import Serviceresult

class BrowseApiResponse(BaseModel):
    """
    BrowseApiResponse
    """
    completed: Optional[StrictStr] = Field(None, description="Datetime representing when the request was completed")
    created: Optional[StrictStr] = Field(None, description="Datetime representing when the request was createed")
    service_error: Optional[StrictStr] = Field(None, alias="serviceError", description="If there is error while processing request. 'none' means no error")
    service_result: Optional[Serviceresult] = Field(None, alias="serviceResult")
    __properties = ["completed", "created", "serviceError", "serviceResult"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BrowseApiResponse:
        """Create an instance of BrowseApiResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of service_result
        if self.service_result:
            _dict['serviceResult'] = self.service_result.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BrowseApiResponse:
        """Create an instance of BrowseApiResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BrowseApiResponse.parse_obj(obj)

        _obj = BrowseApiResponse.parse_obj({
            "completed": obj.get("completed"),
            "created": obj.get("created"),
            "service_error": obj.get("serviceError"),
            "service_result": Serviceresult.from_dict(obj.get("serviceResult")) if obj.get("serviceResult") is not None else None
        })
        return _obj

