# coding: utf-8

"""
    CloudFabrix RDA Platform API

    CloudFabrix RDA Platform API  # noqa: E501

    The version of the OpenAPI document: 3.2.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class UserDetails(BaseModel):
    """
    Response for isUserAuthenticated request. This response contains all the user information that is currently logged in.
    """
    authenticated: Optional[StrictBool] = Field(None, description="Whether user is authenticated")
    company: Optional[StrictStr] = Field(None, description="Company the user belongs to")
    first_name: Optional[StrictStr] = Field(None, description="First name")
    id: Optional[StrictStr] = Field(None, description="Id of the user (email address)")
    is_authenticated: Optional[StrictBool] = Field(None, description="Alias to 'authenticated'")
    is_workspaceadmin: Optional[StrictBool] = Field(None, description="Is the user a workspace admin")
    is_workspacecreator: Optional[StrictBool] = Field(None, description="Is the user a workspace creator")
    last_name: Optional[StrictBool] = Field(None, description="Last Name")
    lastname: Optional[StrictBool] = Field(None, description="Alias to last_name")
    login_time: Optional[StrictStr] = Field(None, description="Login time in ISO format")
    rdac_auth_token: Optional[StrictStr] = Field(None, description="Authentication Token")
    remote_user: Optional[StrictBool] = Field(None, description="Whether user is a remote user or a local user")
    role: Optional[StrictStr] = Field(None, description="User Role")
    session_id: Optional[StrictStr] = Field(None, description="Current session id")
    status: Optional[StrictStr] = Field(None, description="Current status of the user")
    tenantid: Optional[StrictStr] = Field(None, description="Tenant ID of the user")
    user: Optional[StrictStr] = Field(None, description="alias to 'id'")
    workspace: Optional[StrictStr] = Field(None, description="Name of the workspace")
    workspaceid: Optional[StrictStr] = Field(None, description="ID of the workspace")
    __properties = ["authenticated", "company", "first_name", "id", "is_authenticated", "is_workspaceadmin", "is_workspacecreator", "last_name", "lastname", "login_time", "rdac_auth_token", "remote_user", "role", "session_id", "status", "tenantid", "user", "workspace", "workspaceid"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserDetails:
        """Create an instance of UserDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserDetails:
        """Create an instance of UserDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserDetails.parse_obj(obj)

        _obj = UserDetails.parse_obj({
            "authenticated": obj.get("authenticated"),
            "company": obj.get("company"),
            "first_name": obj.get("first_name"),
            "id": obj.get("id"),
            "is_authenticated": obj.get("is_authenticated"),
            "is_workspaceadmin": obj.get("is_workspaceadmin"),
            "is_workspacecreator": obj.get("is_workspacecreator"),
            "last_name": obj.get("last_name"),
            "lastname": obj.get("lastname"),
            "login_time": obj.get("login_time"),
            "rdac_auth_token": obj.get("rdac_auth_token"),
            "remote_user": obj.get("remote_user"),
            "role": obj.get("role"),
            "session_id": obj.get("session_id"),
            "status": obj.get("status"),
            "tenantid": obj.get("tenantid"),
            "user": obj.get("user"),
            "workspace": obj.get("workspace"),
            "workspaceid": obj.get("workspaceid")
        })
        return _obj

