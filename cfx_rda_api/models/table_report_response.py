# coding: utf-8

"""
    CloudFabrix RDA Platform API

    CloudFabrix RDA Platform API  # noqa: E501

    The version of the OpenAPI document: 3.2.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist

class TableReportResponse(BaseModel):
    """
    TableReportResponse
    """
    last_sort_results: Optional[conlist(StrictStr)] = Field(None, description="Last sort tags used for internal puposes")
    report_meta_data: Optional[Dict[str, Any]] = Field(None, alias="reportMetaData", description="Meta information about the report, including columns and types etc")
    offset: Optional[StrictInt] = Field(None, description="Starting offset in the filtered results")
    limit: Optional[StrictInt] = Field(None, description="Maximum number of results to be returned per page")
    sort: Optional[conlist(StrictStr)] = Field(None, description="Sort order passed as part of request")
    total_count: Optional[StrictInt] = Field(None, description="Total number of results that matched the query")
    num_items: Optional[StrictInt] = Field(None, description="Number of results returned in this page")
    is_first: Optional[StrictBool] = Field(True, description="True if this page is first page")
    is_last: Optional[StrictBool] = Field(True, description="True if this page is last page")
    __properties = ["last_sort_results", "reportMetaData", "offset", "limit", "sort", "total_count", "num_items", "is_first", "is_last"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TableReportResponse:
        """Create an instance of TableReportResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TableReportResponse:
        """Create an instance of TableReportResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TableReportResponse.parse_obj(obj)

        _obj = TableReportResponse.parse_obj({
            "last_sort_results": obj.get("last_sort_results"),
            "report_meta_data": obj.get("reportMetaData"),
            "offset": obj.get("offset"),
            "limit": obj.get("limit"),
            "sort": obj.get("sort"),
            "total_count": obj.get("total_count"),
            "num_items": obj.get("num_items"),
            "is_first": obj.get("is_first") if obj.get("is_first") is not None else True,
            "is_last": obj.get("is_last") if obj.get("is_last") is not None else True
        })
        return _obj

