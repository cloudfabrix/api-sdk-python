# coding: utf-8

"""
    CloudFabrix RDA Platform API

    CloudFabrix RDA Platform API  # noqa: E501

    The version of the OpenAPI document: 3.2.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr, conint, conlist

from typing import Any, Dict, Optional

from cfx_rda_api.models.dataset_add_model import DatasetAddModel
from cfx_rda_api.models.datasets_enum import DatasetsEnum
from cfx_rda_api.models.table_report_response import TableReportResponse

from cfx_rda_api.api_client import ApiClient
from cfx_rda_api.api_response import ApiResponse
from cfx_rda_api.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DatasetsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def add_dataset(self, dataset_add_model : DatasetAddModel, **kwargs) -> object:  # noqa: E501
        """Add a dataset  # noqa: E501

        Add a dataset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_dataset(dataset_add_model, async_req=True)
        >>> result = thread.get()

        :param dataset_add_model: (required)
        :type dataset_add_model: DatasetAddModel
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the add_dataset_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.add_dataset_with_http_info(dataset_add_model, **kwargs)  # noqa: E501

    @validate_arguments
    def add_dataset_with_http_info(self, dataset_add_model : DatasetAddModel, **kwargs) -> ApiResponse:  # noqa: E501
        """Add a dataset  # noqa: E501

        Add a dataset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_dataset_with_http_info(dataset_add_model, async_req=True)
        >>> result = thread.get()

        :param dataset_add_model: (required)
        :type dataset_add_model: DatasetAddModel
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'dataset_add_model'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_dataset" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['dataset_add_model'] is not None:
            _body_params = _params['dataset_add_model']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v2/datasets', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_dataset(self, name : Annotated[StrictStr, Field(..., description="Dataset name to be deleted.")], **kwargs) -> object:  # noqa: E501
        """Delete a dataset  # noqa: E501

        Delete a dataset. Please note that all the data of the dataset will be deleted and can not be undone.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_dataset(name, async_req=True)
        >>> result = thread.get()

        :param name: Dataset name to be deleted. (required)
        :type name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the delete_dataset_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.delete_dataset_with_http_info(name, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_dataset_with_http_info(self, name : Annotated[StrictStr, Field(..., description="Dataset name to be deleted.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Delete a dataset  # noqa: E501

        Delete a dataset. Please note that all the data of the dataset will be deleted and can not be undone.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_dataset_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param name: Dataset name to be deleted. (required)
        :type name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dataset" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['name']:
            _path_params['name'] = _params['name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v2/datasets/dataset/{name}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_dataset_all_data(self, name : Annotated[StrictStr, Field(..., description="Name of the dataset")], **kwargs) -> object:  # noqa: E501
        """Delete enitre data of a dataset  # noqa: E501

        Delete entire data of a dataset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_dataset_all_data(name, async_req=True)
        >>> result = thread.get()

        :param name: Name of the dataset (required)
        :type name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the delete_dataset_all_data_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.delete_dataset_all_data_with_http_info(name, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_dataset_all_data_with_http_info(self, name : Annotated[StrictStr, Field(..., description="Name of the dataset")], **kwargs) -> ApiResponse:  # noqa: E501
        """Delete enitre data of a dataset  # noqa: E501

        Delete entire data of a dataset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_dataset_all_data_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param name: Name of the dataset (required)
        :type name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dataset_all_data" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['name']:
            _path_params['name'] = _params['name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v2/datasets/dataset/{name}/data/all', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_dataset_rows(self, name : Annotated[StrictStr, Field(..., description="Name of the dataset")], keys : Annotated[conlist(StrictStr), Field(..., description="Array of keys to match for updating rows")], request_body : conlist(Dict[str, Any]), **kwargs) -> object:  # noqa: E501
        """Delete matching dataset rows  # noqa: E501

        Delete dataset rows matching the input data     All the rows in existing dataset that match all the keys in input data are deleted.     NOTE: This directly updates the dataset and all drafts are removed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_dataset_rows(name, keys, request_body, async_req=True)
        >>> result = thread.get()

        :param name: Name of the dataset (required)
        :type name: str
        :param keys: Array of keys to match for updating rows (required)
        :type keys: List[str]
        :param request_body: (required)
        :type request_body: List[object]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the delete_dataset_rows_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.delete_dataset_rows_with_http_info(name, keys, request_body, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_dataset_rows_with_http_info(self, name : Annotated[StrictStr, Field(..., description="Name of the dataset")], keys : Annotated[conlist(StrictStr), Field(..., description="Array of keys to match for updating rows")], request_body : conlist(Dict[str, Any]), **kwargs) -> ApiResponse:  # noqa: E501
        """Delete matching dataset rows  # noqa: E501

        Delete dataset rows matching the input data     All the rows in existing dataset that match all the keys in input data are deleted.     NOTE: This directly updates the dataset and all drafts are removed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_dataset_rows_with_http_info(name, keys, request_body, async_req=True)
        >>> result = thread.get()

        :param name: Name of the dataset (required)
        :type name: str
        :param keys: Array of keys to match for updating rows (required)
        :type keys: List[str]
        :param request_body: (required)
        :type request_body: List[object]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'name',
            'keys',
            'request_body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dataset_rows" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['name']:
            _path_params['name'] = _params['name']


        # process the query parameters
        _query_params = []
        if _params.get('keys') is not None:  # noqa: E501
            _query_params.append(('keys', _params['keys']))
            _collection_formats['keys'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['request_body'] is not None:
            _body_params = _params['request_body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v2/datasets/dataset/{name}/data', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_dataset_data(self, name : Annotated[StrictStr, Field(..., description="Name of the dataset")], cfxql_query : Annotated[Optional[StrictStr], Field(description="<a href='https://bot-docs.cloudfabrix.io/reference_guides/cfxql/'>cfxql query</a> string to filter the results")] = None, search : Annotated[Optional[StrictStr], Field(description="search across fields: ['name']")] = None, sort : Annotated[Optional[conlist(StrictStr)], Field(description="Sort the output based on given fields. Prepend '-' to sort descending")] = None, offset : Annotated[Optional[conint(strict=True, ge=0)], Field(description="Offset to start the results from.")] = None, limit : Annotated[Optional[conint(strict=True, ge=1)], Field(description="Maximum number of results to return")] = None, **kwargs) -> TableReportResponse:  # noqa: E501
        """Get data of a dataset  # noqa: E501

        Get data of a dataset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_dataset_data(name, cfxql_query, search, sort, offset, limit, async_req=True)
        >>> result = thread.get()

        :param name: Name of the dataset (required)
        :type name: str
        :param cfxql_query: <a href='https://bot-docs.cloudfabrix.io/reference_guides/cfxql/'>cfxql query</a> string to filter the results
        :type cfxql_query: str
        :param search: search across fields: ['name']
        :type search: str
        :param sort: Sort the output based on given fields. Prepend '-' to sort descending
        :type sort: List[str]
        :param offset: Offset to start the results from.
        :type offset: int
        :param limit: Maximum number of results to return
        :type limit: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TableReportResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_dataset_data_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_dataset_data_with_http_info(name, cfxql_query, search, sort, offset, limit, **kwargs)  # noqa: E501

    @validate_arguments
    def get_dataset_data_with_http_info(self, name : Annotated[StrictStr, Field(..., description="Name of the dataset")], cfxql_query : Annotated[Optional[StrictStr], Field(description="<a href='https://bot-docs.cloudfabrix.io/reference_guides/cfxql/'>cfxql query</a> string to filter the results")] = None, search : Annotated[Optional[StrictStr], Field(description="search across fields: ['name']")] = None, sort : Annotated[Optional[conlist(StrictStr)], Field(description="Sort the output based on given fields. Prepend '-' to sort descending")] = None, offset : Annotated[Optional[conint(strict=True, ge=0)], Field(description="Offset to start the results from.")] = None, limit : Annotated[Optional[conint(strict=True, ge=1)], Field(description="Maximum number of results to return")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get data of a dataset  # noqa: E501

        Get data of a dataset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_dataset_data_with_http_info(name, cfxql_query, search, sort, offset, limit, async_req=True)
        >>> result = thread.get()

        :param name: Name of the dataset (required)
        :type name: str
        :param cfxql_query: <a href='https://bot-docs.cloudfabrix.io/reference_guides/cfxql/'>cfxql query</a> string to filter the results
        :type cfxql_query: str
        :param search: search across fields: ['name']
        :type search: str
        :param sort: Sort the output based on given fields. Prepend '-' to sort descending
        :type sort: List[str]
        :param offset: Offset to start the results from.
        :type offset: int
        :param limit: Maximum number of results to return
        :type limit: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TableReportResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'name',
            'cfxql_query',
            'search',
            'sort',
            'offset',
            'limit'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dataset_data" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['name']:
            _path_params['name'] = _params['name']


        # process the query parameters
        _query_params = []
        if _params.get('cfxql_query') is not None:  # noqa: E501
            _query_params.append(('cfxql_query', _params['cfxql_query']))

        if _params.get('search') is not None:  # noqa: E501
            _query_params.append(('search', _params['search']))

        if _params.get('sort') is not None:  # noqa: E501
            _query_params.append(('sort', _params['sort']))
            _collection_formats['sort'] = 'multi'

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "TableReportResponse",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v2/datasets/dataset/{name}/data', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_datasets(self, cfxql_query : Annotated[Optional[StrictStr], Field(description="<a href='https://bot-docs.cloudfabrix.io/reference_guides/cfxql/'>cfxql query</a> string to filter the results")] = None, search : Annotated[Optional[StrictStr], Field(description="search across fields: ['name', 'schema']")] = None, offset : Annotated[Optional[conint(strict=True, ge=0)], Field(description="Offset to start the results from.")] = None, limit : Annotated[Optional[conint(strict=True, ge=1)], Field(description="Maximum number of results to return")] = None, sort : Annotated[Optional[conlist(DatasetsEnum)], Field(description="Sort the output based on given fields")] = None, **kwargs) -> TableReportResponse:  # noqa: E501
        """Fetch meta data about datasets  # noqa: E501

        Fetch meta data about datasets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_datasets(cfxql_query, search, offset, limit, sort, async_req=True)
        >>> result = thread.get()

        :param cfxql_query: <a href='https://bot-docs.cloudfabrix.io/reference_guides/cfxql/'>cfxql query</a> string to filter the results
        :type cfxql_query: str
        :param search: search across fields: ['name', 'schema']
        :type search: str
        :param offset: Offset to start the results from.
        :type offset: int
        :param limit: Maximum number of results to return
        :type limit: int
        :param sort: Sort the output based on given fields
        :type sort: List[DatasetsEnum]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TableReportResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_datasets_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_datasets_with_http_info(cfxql_query, search, offset, limit, sort, **kwargs)  # noqa: E501

    @validate_arguments
    def get_datasets_with_http_info(self, cfxql_query : Annotated[Optional[StrictStr], Field(description="<a href='https://bot-docs.cloudfabrix.io/reference_guides/cfxql/'>cfxql query</a> string to filter the results")] = None, search : Annotated[Optional[StrictStr], Field(description="search across fields: ['name', 'schema']")] = None, offset : Annotated[Optional[conint(strict=True, ge=0)], Field(description="Offset to start the results from.")] = None, limit : Annotated[Optional[conint(strict=True, ge=1)], Field(description="Maximum number of results to return")] = None, sort : Annotated[Optional[conlist(DatasetsEnum)], Field(description="Sort the output based on given fields")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Fetch meta data about datasets  # noqa: E501

        Fetch meta data about datasets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_datasets_with_http_info(cfxql_query, search, offset, limit, sort, async_req=True)
        >>> result = thread.get()

        :param cfxql_query: <a href='https://bot-docs.cloudfabrix.io/reference_guides/cfxql/'>cfxql query</a> string to filter the results
        :type cfxql_query: str
        :param search: search across fields: ['name', 'schema']
        :type search: str
        :param offset: Offset to start the results from.
        :type offset: int
        :param limit: Maximum number of results to return
        :type limit: int
        :param sort: Sort the output based on given fields
        :type sort: List[DatasetsEnum]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TableReportResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'cfxql_query',
            'search',
            'offset',
            'limit',
            'sort'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_datasets" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('cfxql_query') is not None:  # noqa: E501
            _query_params.append(('cfxql_query', _params['cfxql_query']))

        if _params.get('search') is not None:  # noqa: E501
            _query_params.append(('search', _params['search']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('sort') is not None:  # noqa: E501
            _query_params.append(('sort', _params['sort']))
            _collection_formats['sort'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "TableReportResponse",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v2/datasets', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_dataset_data(self, name : Annotated[StrictStr, Field(..., description="Name of the dataset")], request_body : conlist(Dict[str, Any]), replace : Annotated[Optional[StrictBool], Field(description="If set to true, replace the existing data with new data")] = None, keys : Annotated[Optional[conlist(StrictStr)], Field(description="Array of keys to match for updating rows")] = None, **kwargs) -> object:  # noqa: E501
        """Update rows of a dataset  # noqa: E501

        Update (merge or replace) existing dataset data.     This function currently does not support deleting rows.<br/>     If replace is true, entire existing dataset data is replaced with the new data in input.<br/>     If replace is false, <br/>     <ul>         <li>If keys are not given, the input data is appened to the existing dataset.         <li>If keys are given then the following flow explains the operation<br/>             For each row in the input data:             <ul>                 <li>The rows with same values for all the keys are replaced with input row.                 <li>Other rows are appended to the existing dataset             </ul>         Error raised when:             <ul>                 <li>If there are duplicate rows in input data with same key values                 <li>If any key passed in keys is not present as a column in the input data             </ul>     </ul>     NOTE: This directly updates the dataset and all drafts are removed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_dataset_data(name, request_body, replace, keys, async_req=True)
        >>> result = thread.get()

        :param name: Name of the dataset (required)
        :type name: str
        :param request_body: (required)
        :type request_body: List[object]
        :param replace: If set to true, replace the existing data with new data
        :type replace: bool
        :param keys: Array of keys to match for updating rows
        :type keys: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the update_dataset_data_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.update_dataset_data_with_http_info(name, request_body, replace, keys, **kwargs)  # noqa: E501

    @validate_arguments
    def update_dataset_data_with_http_info(self, name : Annotated[StrictStr, Field(..., description="Name of the dataset")], request_body : conlist(Dict[str, Any]), replace : Annotated[Optional[StrictBool], Field(description="If set to true, replace the existing data with new data")] = None, keys : Annotated[Optional[conlist(StrictStr)], Field(description="Array of keys to match for updating rows")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update rows of a dataset  # noqa: E501

        Update (merge or replace) existing dataset data.     This function currently does not support deleting rows.<br/>     If replace is true, entire existing dataset data is replaced with the new data in input.<br/>     If replace is false, <br/>     <ul>         <li>If keys are not given, the input data is appened to the existing dataset.         <li>If keys are given then the following flow explains the operation<br/>             For each row in the input data:             <ul>                 <li>The rows with same values for all the keys are replaced with input row.                 <li>Other rows are appended to the existing dataset             </ul>         Error raised when:             <ul>                 <li>If there are duplicate rows in input data with same key values                 <li>If any key passed in keys is not present as a column in the input data             </ul>     </ul>     NOTE: This directly updates the dataset and all drafts are removed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_dataset_data_with_http_info(name, request_body, replace, keys, async_req=True)
        >>> result = thread.get()

        :param name: Name of the dataset (required)
        :type name: str
        :param request_body: (required)
        :type request_body: List[object]
        :param replace: If set to true, replace the existing data with new data
        :type replace: bool
        :param keys: Array of keys to match for updating rows
        :type keys: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'name',
            'request_body',
            'replace',
            'keys'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_dataset_data" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['name']:
            _path_params['name'] = _params['name']


        # process the query parameters
        _query_params = []
        if _params.get('replace') is not None:  # noqa: E501
            _query_params.append(('replace', _params['replace']))

        if _params.get('keys') is not None:  # noqa: E501
            _query_params.append(('keys', _params['keys']))
            _collection_formats['keys'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['request_body'] is not None:
            _body_params = _params['request_body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v2/datasets/dataset/{name}/data', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
